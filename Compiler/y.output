Grammar

    0 $accept: Program $end

    1 Program: func_list

    2 func_list: func_list func
    3          | %empty

    4 $@1: %empty

    5 func: func_prefix OF $@1 stmt_list CF

    6 $@2: %empty

    7 func_prefix: func_data_type ID $@2 OC param_list CC

    8 func_data_type: data_type
    9               | VOID

   10 $@3: %empty

   11 param_list: param $@3 COMMA param_list
   12           | param
   13           | %empty

   14 param: data_type ID

   15 stmt_list: stmt stmt_list
   16          | %empty

   17 stmt: declaration
   18     | assign SCOL
   19     | expr SCOL
   20     | return_stmt SCOL
   21     | if_stmt
   22     | while_loop_stmt
   23     | for_loop_stmt
   24     | BREAK SCOL
   25     | CONTINUE SCOL
   26     | switch_stmt
   27     | INPUT OC ID CC SCOL
   28     | INPUT OC ID OS expr CS CC SCOL
   29     | OUTPUT OC expr CC SCOL
   30     | OUTPUT OC STR CC SCOL

   31 declaration: data_type ID SCOL
   32            | STRING ID ASSIGN STR SCOL
   33            | data_type ID ASSIGN expr SCOL
   34            | data_type ID OS INT_NUM CS SCOL

   35 $@4: %empty

   36 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

   37 $@5: %empty

   38 arr_values: const $@5 COMMA arr_values
   39           | const

   40 return_stmt: RETURN expr

   41 data_type: INT
   42          | FLOAT
   43          | CHAR

   44 expr: expr ADD expr
   45     | expr SUBTRACT expr
   46     | expr MULTIPLY expr
   47     | expr DIVIDE expr
   48     | expr LE expr
   49     | expr GE expr
   50     | expr LT expr
   51     | expr GT expr
   52     | expr EQ expr
   53     | expr NE expr
   54     | expr AND expr
   55     | expr OR expr
   56     | expr MODULO expr
   57     | expr BITAND expr
   58     | expr BITOR expr
   59     | expr XOR expr
   60     | expr LEFTSHIFT expr
   61     | expr RIGHTSHIFT expr
   62     | unary_expr
   63     | primary_expr
   64     | postfix_expr

   65 postfix_expr: func_call
   66             | ID OS expr CS

   67 unary_expr: unary_op primary_expr

   68 primary_expr: ID
   69             | const
   70             | OC expr CC

   71 unary_op: ADD
   72         | SUBTRACT
   73         | NOT
   74         | NEGATION

   75 const: INT_NUM
   76      | FLOAT_NUM
   77      | CHARACTER

   78 assign: ID ASSIGN expr
   79       | ID OS expr CS ASSIGN expr

   80 $@6: %empty

   81 $@7: %empty

   82 $@8: %empty

   83 $@9: %empty

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

   85 $@10: %empty

   86 $@11: %empty

   87 $@12: %empty

   88 $@13: %empty

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt
   90          | %empty

   91 $@14: %empty

   92 else_stmt: ELSE OF $@14 stmt_list CF
   93          | %empty

   94 $@15: %empty

   95 $@16: %empty

   96 $@17: %empty

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

   98 case_stmt_list: case_stmt case_stmt_list
   99               | %empty

  100 $@18: %empty

  101 $@19: %empty

  102 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list

  103 default_stmt: DEFAULT COLON stmt_list
  104             | %empty

  105 $@20: %empty

  106 $@21: %empty

  107 $@22: %empty

  108 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF

  109 $@23: %empty

  110 $@24: %empty

  111 $@25: %empty

  112 $@26: %empty

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

  114 $@27: %empty

  115 func_call: ID $@27 OC arg_list CC

  116 arg_list: arg COMMA arg_list
  117         | arg
  118         | %empty

  119 arg: expr


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 41
CHAR (259) 43
FLOAT (260) 42
STRING (261) 32
VOID (262) 9
RETURN (263) 40
INT_NUM (264) 34 36 75
FLOAT_NUM (265) 76
ID (266) 7 14 27 28 31 32 33 34 36 66 68 78 79 97 115
LEFTSHIFT (267) 60
RIGHTSHIFT (268) 61
LE (269) 48
GE (270) 49
EQ (271) 52
NE (272) 53
GT (273) 51
LT (274) 50
AND (275) 54
OR (276) 55
NOT (277) 73
ADD (278) 44 71
SUBTRACT (279) 45 72
DIVIDE (280) 47
MULTIPLY (281) 46
MODULO (282) 56
BITAND (283) 57
BITOR (284) 58
NEGATION (285) 74
XOR (286) 59
STR (287) 30 32
CHARACTER (288) 77
CC (289) 7 27 28 29 30 70 84 89 97 102 108 113 115
OC (290) 7 27 28 29 30 70 84 89 97 102 108 113 115
CS (291) 28 34 36 66 79
OS (292) 28 34 36 66 79
CF (293) 5 36 84 89 92 97 108 113
OF (294) 5 36 84 89 92 97 108 113
COMMA (295) 11 38 116
COLON (296) 102 103
SCOL (297) 18 19 20 24 25 27 28 29 30 31 32 33 34 36 113
OUTPUT (298) 29 30
INPUT (299) 27 28
SWITCH (300) 97
CASE (301) 102
BREAK (302) 24
DEFAULT (303) 103
IF (304) 84
ELIF (305) 89
ELSE (306) 92
WHILE (307) 108
FOR (308) 113
CONTINUE (309) 25
ASSIGN (310) 32 33 36 78 79


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
Program (57)
    on left: 1, on right: 0
func_list (58)
    on left: 2 3, on right: 1 2
func (59)
    on left: 5, on right: 2
$@1 (60)
    on left: 4, on right: 5
func_prefix (61)
    on left: 7, on right: 5
$@2 (62)
    on left: 6, on right: 7
func_data_type (63)
    on left: 8 9, on right: 7
param_list (64)
    on left: 11 12 13, on right: 7 11
$@3 (65)
    on left: 10, on right: 11
param (66)
    on left: 14, on right: 11 12
stmt_list (67)
    on left: 15 16, on right: 5 15 84 89 92 102 103 108 113
stmt (68)
    on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30, on right: 15
declaration (69)
    on left: 31 32 33 34 36, on right: 17
$@4 (70)
    on left: 35, on right: 36
arr_values (71)
    on left: 38 39, on right: 36 38
$@5 (72)
    on left: 37, on right: 38
return_stmt (73)
    on left: 40, on right: 20
data_type (74)
    on left: 41 42 43, on right: 8 14 31 33 34 36
expr (75)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62 63 64, on right: 19 28 29 33 40 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 58 59 60 61 66 70 78 79 84 89 108 113 119
postfix_expr (76)
    on left: 65 66, on right: 64
unary_expr (77)
    on left: 67, on right: 62
primary_expr (78)
    on left: 68 69 70, on right: 63 67
unary_op (79)
    on left: 71 72 73 74, on right: 67
const (80)
    on left: 75 76 77, on right: 38 39 69 102
assign (81)
    on left: 78 79, on right: 18 113
if_stmt (82)
    on left: 84, on right: 21
$@6 (83)
    on left: 80, on right: 84
$@7 (84)
    on left: 81, on right: 84
$@8 (85)
    on left: 82, on right: 84
$@9 (86)
    on left: 83, on right: 84
elif_stmt (87)
    on left: 89 90, on right: 84 89
$@10 (88)
    on left: 85, on right: 89
$@11 (89)
    on left: 86, on right: 89
$@12 (90)
    on left: 87, on right: 89
$@13 (91)
    on left: 88, on right: 89
else_stmt (92)
    on left: 92 93, on right: 84
$@14 (93)
    on left: 91, on right: 92
switch_stmt (94)
    on left: 97, on right: 26
$@15 (95)
    on left: 94, on right: 97
$@16 (96)
    on left: 95, on right: 97
$@17 (97)
    on left: 96, on right: 97
case_stmt_list (98)
    on left: 98 99, on right: 97 98
case_stmt (99)
    on left: 102, on right: 98
$@18 (100)
    on left: 100, on right: 102
$@19 (101)
    on left: 101, on right: 102
default_stmt (102)
    on left: 103 104, on right: 97
while_loop_stmt (103)
    on left: 108, on right: 22
$@20 (104)
    on left: 105, on right: 108
$@21 (105)
    on left: 106, on right: 108
$@22 (106)
    on left: 107, on right: 108
for_loop_stmt (107)
    on left: 113, on right: 23
$@23 (108)
    on left: 109, on right: 113
$@24 (109)
    on left: 110, on right: 113
$@25 (110)
    on left: 111, on right: 113
$@26 (111)
    on left: 112, on right: 113
func_call (112)
    on left: 115, on right: 65
$@27 (113)
    on left: 114, on right: 115
arg_list (114)
    on left: 116 117 118, on right: 115 116
arg (115)
    on left: 119, on right: 116 117


State 0

    0 $accept: . Program $end

    $default  reduce using rule 3 (func_list)

    Program    go to state 1
    func_list  go to state 2


State 1

    0 $accept: Program . $end

    $end  shift, and go to state 3


State 2

    1 Program: func_list .
    2 func_list: func_list . func

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6
    VOID   shift, and go to state 7

    $default  reduce using rule 1 (Program)

    func            go to state 8
    func_prefix     go to state 9
    func_data_type  go to state 10
    data_type       go to state 11


State 3

    0 $accept: Program $end .

    $default  accept


State 4

   41 data_type: INT .

    $default  reduce using rule 41 (data_type)


State 5

   43 data_type: CHAR .

    $default  reduce using rule 43 (data_type)


State 6

   42 data_type: FLOAT .

    $default  reduce using rule 42 (data_type)


State 7

    9 func_data_type: VOID .

    $default  reduce using rule 9 (func_data_type)


State 8

    2 func_list: func_list func .

    $default  reduce using rule 2 (func_list)


State 9

    5 func: func_prefix . OF $@1 stmt_list CF

    OF  shift, and go to state 12


State 10

    7 func_prefix: func_data_type . ID $@2 OC param_list CC

    ID  shift, and go to state 13


State 11

    8 func_data_type: data_type .

    $default  reduce using rule 8 (func_data_type)


State 12

    5 func: func_prefix OF . $@1 stmt_list CF

    $default  reduce using rule 4 ($@1)

    $@1  go to state 14


State 13

    7 func_prefix: func_data_type ID . $@2 OC param_list CC

    $default  reduce using rule 6 ($@2)

    $@2  go to state 15


State 14

    5 func: func_prefix OF $@1 . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 35
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 15

    7 func_prefix: func_data_type ID $@2 . OC param_list CC

    OC  shift, and go to state 52


State 16

   32 declaration: STRING . ID ASSIGN STR SCOL

    ID  shift, and go to state 53


State 17

   40 return_stmt: RETURN . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 55
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 18

   75 const: INT_NUM .

    $default  reduce using rule 75 (const)


State 19

   76 const: FLOAT_NUM .

    $default  reduce using rule 76 (const)


State 20

   66 postfix_expr: ID . OS expr CS
   68 primary_expr: ID .
   78 assign: ID . ASSIGN expr
   79       | ID . OS expr CS ASSIGN expr
  115 func_call: ID . $@27 OC arg_list CC

    OS      shift, and go to state 56
    ASSIGN  shift, and go to state 57

    OC        reduce using rule 114 ($@27)
    $default  reduce using rule 68 (primary_expr)

    $@27  go to state 58


State 21

   73 unary_op: NOT .

    $default  reduce using rule 73 (unary_op)


State 22

   71 unary_op: ADD .

    $default  reduce using rule 71 (unary_op)


State 23

   72 unary_op: SUBTRACT .

    $default  reduce using rule 72 (unary_op)


State 24

   74 unary_op: NEGATION .

    $default  reduce using rule 74 (unary_op)


State 25

   77 const: CHARACTER .

    $default  reduce using rule 77 (const)


State 26

   70 primary_expr: OC . expr CC

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 59
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 27

   29 stmt: OUTPUT . OC expr CC SCOL
   30     | OUTPUT . OC STR CC SCOL

    OC  shift, and go to state 60


State 28

   27 stmt: INPUT . OC ID CC SCOL
   28     | INPUT . OC ID OS expr CS CC SCOL

    OC  shift, and go to state 61


State 29

   97 switch_stmt: SWITCH . $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 94 ($@15)

    $@15  go to state 62


State 30

   24 stmt: BREAK . SCOL

    SCOL  shift, and go to state 63


State 31

   84 if_stmt: IF . $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 80 ($@6)

    $@6  go to state 64


State 32

  108 while_loop_stmt: WHILE . $@20 OC expr CC $@21 OF $@22 stmt_list CF

    $default  reduce using rule 105 ($@20)

    $@20  go to state 65


State 33

  113 for_loop_stmt: FOR . OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    OC  shift, and go to state 66


State 34

   25 stmt: CONTINUE . SCOL

    SCOL  shift, and go to state 67


State 35

    5 func: func_prefix OF $@1 stmt_list . CF

    CF  shift, and go to state 68


State 36

   15 stmt_list: stmt . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 69
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 37

   17 stmt: declaration .

    $default  reduce using rule 17 (stmt)


State 38

   20 stmt: return_stmt . SCOL

    SCOL  shift, and go to state 70


State 39

   31 declaration: data_type . ID SCOL
   33            | data_type . ID ASSIGN expr SCOL
   34            | data_type . ID OS INT_NUM CS SCOL
   36            | data_type . ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    ID  shift, and go to state 71


State 40

   19 stmt: expr . SCOL
   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    SCOL        shift, and go to state 90


State 41

   64 expr: postfix_expr .

    $default  reduce using rule 64 (expr)


State 42

   62 expr: unary_expr .

    $default  reduce using rule 62 (expr)


State 43

   63 expr: primary_expr .

    $default  reduce using rule 63 (expr)


State 44

   67 unary_expr: unary_op . primary_expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 91
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    primary_expr  go to state 92
    const         go to state 45


State 45

   69 primary_expr: const .

    $default  reduce using rule 69 (primary_expr)


State 46

   18 stmt: assign . SCOL

    SCOL  shift, and go to state 93


State 47

   21 stmt: if_stmt .

    $default  reduce using rule 21 (stmt)


State 48

   26 stmt: switch_stmt .

    $default  reduce using rule 26 (stmt)


State 49

   22 stmt: while_loop_stmt .

    $default  reduce using rule 22 (stmt)


State 50

   23 stmt: for_loop_stmt .

    $default  reduce using rule 23 (stmt)


State 51

   65 postfix_expr: func_call .

    $default  reduce using rule 65 (postfix_expr)


State 52

    7 func_prefix: func_data_type ID $@2 OC . param_list CC

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 13 (param_list)

    param_list  go to state 94
    param       go to state 95
    data_type   go to state 96


State 53

   32 declaration: STRING ID . ASSIGN STR SCOL

    ASSIGN  shift, and go to state 97


State 54

   66 postfix_expr: ID . OS expr CS
   68 primary_expr: ID .
  115 func_call: ID . $@27 OC arg_list CC

    OS  shift, and go to state 98

    OC        reduce using rule 114 ($@27)
    $default  reduce using rule 68 (primary_expr)

    $@27  go to state 58


State 55

   40 return_stmt: RETURN expr .
   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 40 (return_stmt)


State 56

   66 postfix_expr: ID OS . expr CS
   79 assign: ID OS . expr CS ASSIGN expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 99
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 57

   78 assign: ID ASSIGN . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 100
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 58

  115 func_call: ID $@27 . OC arg_list CC

    OC  shift, and go to state 101


State 59

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   70 primary_expr: OC expr . CC

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 102


State 60

   29 stmt: OUTPUT OC . expr CC SCOL
   30     | OUTPUT OC . STR CC SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    STR        shift, and go to state 103
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 104
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 61

   27 stmt: INPUT OC . ID CC SCOL
   28     | INPUT OC . ID OS expr CS CC SCOL

    ID  shift, and go to state 105


State 62

   97 switch_stmt: SWITCH $@15 . OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    OC  shift, and go to state 106


State 63

   24 stmt: BREAK SCOL .

    $default  reduce using rule 24 (stmt)


State 64

   84 if_stmt: IF $@6 . OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OC  shift, and go to state 107


State 65

  108 while_loop_stmt: WHILE $@20 . OC expr CC $@21 OF $@22 stmt_list CF

    OC  shift, and go to state 108


State 66

  113 for_loop_stmt: FOR OC . assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    ID  shift, and go to state 109

    assign  go to state 110


State 67

   25 stmt: CONTINUE SCOL .

    $default  reduce using rule 25 (stmt)


State 68

    5 func: func_prefix OF $@1 stmt_list CF .

    $default  reduce using rule 5 (func)


State 69

   15 stmt_list: stmt stmt_list .

    $default  reduce using rule 15 (stmt_list)


State 70

   20 stmt: return_stmt SCOL .

    $default  reduce using rule 20 (stmt)


State 71

   31 declaration: data_type ID . SCOL
   33            | data_type ID . ASSIGN expr SCOL
   34            | data_type ID . OS INT_NUM CS SCOL
   36            | data_type ID . OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    OS      shift, and go to state 111
    SCOL    shift, and go to state 112
    ASSIGN  shift, and go to state 113


State 72

   60 expr: expr LEFTSHIFT . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 114
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 73

   61 expr: expr RIGHTSHIFT . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 115
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 74

   48 expr: expr LE . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 116
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 75

   49 expr: expr GE . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 117
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 76

   52 expr: expr EQ . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 118
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 77

   53 expr: expr NE . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 119
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 78

   51 expr: expr GT . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 120
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 79

   50 expr: expr LT . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 121
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 80

   54 expr: expr AND . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 122
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 81

   55 expr: expr OR . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 123
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 82

   44 expr: expr ADD . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 124
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 83

   45 expr: expr SUBTRACT . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 125
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 84

   47 expr: expr DIVIDE . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 126
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 85

   46 expr: expr MULTIPLY . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 127
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 86

   56 expr: expr MODULO . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 128
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 87

   57 expr: expr BITAND . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 129
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 88

   58 expr: expr BITOR . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 130
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 89

   59 expr: expr XOR . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 131
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 90

   19 stmt: expr SCOL .

    $default  reduce using rule 19 (stmt)


State 91

   68 primary_expr: ID .

    $default  reduce using rule 68 (primary_expr)


State 92

   67 unary_expr: unary_op primary_expr .

    $default  reduce using rule 67 (unary_expr)


State 93

   18 stmt: assign SCOL .

    $default  reduce using rule 18 (stmt)


State 94

    7 func_prefix: func_data_type ID $@2 OC param_list . CC

    CC  shift, and go to state 132


State 95

   11 param_list: param . $@3 COMMA param_list
   12           | param .

    CC        reduce using rule 12 (param_list)
    $default  reduce using rule 10 ($@3)

    $@3  go to state 133


State 96

   14 param: data_type . ID

    ID  shift, and go to state 134


State 97

   32 declaration: STRING ID ASSIGN . STR SCOL

    STR  shift, and go to state 135


State 98

   66 postfix_expr: ID OS . expr CS

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 136
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 99

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   66 postfix_expr: ID OS expr . CS
   79 assign: ID OS expr . CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 137


State 100

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   78 assign: ID ASSIGN expr .

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 78 (assign)


State 101

  115 func_call: ID $@27 OC . arg_list CC

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    $default  reduce using rule 118 (arg_list)

    expr          go to state 138
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51
    arg_list      go to state 139
    arg           go to state 140


State 102

   70 primary_expr: OC expr CC .

    $default  reduce using rule 70 (primary_expr)


State 103

   30 stmt: OUTPUT OC STR . CC SCOL

    CC  shift, and go to state 141


State 104

   29 stmt: OUTPUT OC expr . CC SCOL
   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 142


State 105

   27 stmt: INPUT OC ID . CC SCOL
   28     | INPUT OC ID . OS expr CS CC SCOL

    CC  shift, and go to state 143
    OS  shift, and go to state 144


State 106

   97 switch_stmt: SWITCH $@15 OC . ID $@16 CC OF case_stmt_list $@17 default_stmt CF

    ID  shift, and go to state 145


State 107

   84 if_stmt: IF $@6 OC . expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 146
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 108

  108 while_loop_stmt: WHILE $@20 OC . expr CC $@21 OF $@22 stmt_list CF

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 147
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 109

   78 assign: ID . ASSIGN expr
   79       | ID . OS expr CS ASSIGN expr

    OS      shift, and go to state 148
    ASSIGN  shift, and go to state 57


State 110

  113 for_loop_stmt: FOR OC assign . SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    SCOL  shift, and go to state 149


State 111

   34 declaration: data_type ID OS . INT_NUM CS SCOL
   36            | data_type ID OS . INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL

    INT_NUM  shift, and go to state 150


State 112

   31 declaration: data_type ID SCOL .

    $default  reduce using rule 31 (declaration)


State 113

   33 declaration: data_type ID ASSIGN . expr SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 151
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 114

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   60     | expr LEFTSHIFT expr .
   61     | expr . RIGHTSHIFT expr

    ADD       shift, and go to state 82
    SUBTRACT  shift, and go to state 83
    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 60 (expr)


State 115

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   61     | expr RIGHTSHIFT expr .

    ADD       shift, and go to state 82
    SUBTRACT  shift, and go to state 83
    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 61 (expr)


State 116

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   48     | expr LE expr .
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 48 (expr)


State 117

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   49     | expr GE expr .
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 49 (expr)


State 118

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   52     | expr EQ expr .
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 52 (expr)


State 119

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   53     | expr NE expr .
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 53 (expr)


State 120

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   51     | expr GT expr .
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 51 (expr)


State 121

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   50     | expr LT expr .
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 50 (expr)


State 122

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   54     | expr AND expr .
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 54 (expr)


State 123

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   55     | expr OR expr .
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 55 (expr)


State 124

   44 expr: expr . ADD expr
   44     | expr ADD expr .
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 44 (expr)


State 125

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   45     | expr SUBTRACT expr .
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    DIVIDE    shift, and go to state 84
    MULTIPLY  shift, and go to state 85
    MODULO    shift, and go to state 86

    $default  reduce using rule 45 (expr)


State 126

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   47     | expr DIVIDE expr .
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    $default  reduce using rule 47 (expr)


State 127

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   46     | expr MULTIPLY expr .
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    $default  reduce using rule 46 (expr)


State 128

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   56     | expr MODULO expr .
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    $default  reduce using rule 56 (expr)


State 129

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   57     | expr BITAND expr .
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86

    $default  reduce using rule 57 (expr)


State 130

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   58     | expr BITOR expr .
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    XOR         shift, and go to state 89

    $default  reduce using rule 58 (expr)


State 131

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   59     | expr XOR expr .
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87

    $default  reduce using rule 59 (expr)


State 132

    7 func_prefix: func_data_type ID $@2 OC param_list CC .

    $default  reduce using rule 7 (func_prefix)


State 133

   11 param_list: param $@3 . COMMA param_list

    COMMA  shift, and go to state 152


State 134

   14 param: data_type ID .

    $default  reduce using rule 14 (param)


State 135

   32 declaration: STRING ID ASSIGN STR . SCOL

    SCOL  shift, and go to state 153


State 136

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   66 postfix_expr: ID OS expr . CS

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 154


State 137

   66 postfix_expr: ID OS expr CS .
   79 assign: ID OS expr CS . ASSIGN expr

    ASSIGN  shift, and go to state 155

    $default  reduce using rule 66 (postfix_expr)


State 138

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
  119 arg: expr .

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 119 (arg)


State 139

  115 func_call: ID $@27 OC arg_list . CC

    CC  shift, and go to state 156


State 140

  116 arg_list: arg . COMMA arg_list
  117         | arg .

    COMMA  shift, and go to state 157

    $default  reduce using rule 117 (arg_list)


State 141

   30 stmt: OUTPUT OC STR CC . SCOL

    SCOL  shift, and go to state 158


State 142

   29 stmt: OUTPUT OC expr CC . SCOL

    SCOL  shift, and go to state 159


State 143

   27 stmt: INPUT OC ID CC . SCOL

    SCOL  shift, and go to state 160


State 144

   28 stmt: INPUT OC ID OS . expr CS CC SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 161
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 145

   97 switch_stmt: SWITCH $@15 OC ID . $@16 CC OF case_stmt_list $@17 default_stmt CF

    $default  reduce using rule 95 ($@16)

    $@16  go to state 162


State 146

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   84 if_stmt: IF $@6 OC expr . CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 163


State 147

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
  108 while_loop_stmt: WHILE $@20 OC expr . CC $@21 OF $@22 stmt_list CF

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 164


State 148

   79 assign: ID OS . expr CS ASSIGN expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 165
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 149

  113 for_loop_stmt: FOR OC assign SCOL . $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 109 ($@23)

    $@23  go to state 166


State 150

   34 declaration: data_type ID OS INT_NUM . CS SCOL
   36            | data_type ID OS INT_NUM . CS ASSIGN $@4 OF arr_values CF SCOL

    CS  shift, and go to state 167


State 151

   33 declaration: data_type ID ASSIGN expr . SCOL
   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    SCOL        shift, and go to state 168


State 152

   11 param_list: param $@3 COMMA . param_list

    INT    shift, and go to state 4
    CHAR   shift, and go to state 5
    FLOAT  shift, and go to state 6

    $default  reduce using rule 13 (param_list)

    param_list  go to state 169
    param       go to state 95
    data_type   go to state 96


State 153

   32 declaration: STRING ID ASSIGN STR SCOL .

    $default  reduce using rule 32 (declaration)


State 154

   66 postfix_expr: ID OS expr CS .

    $default  reduce using rule 66 (postfix_expr)


State 155

   79 assign: ID OS expr CS ASSIGN . expr

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 170
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 156

  115 func_call: ID $@27 OC arg_list CC .

    $default  reduce using rule 115 (func_call)


State 157

  116 arg_list: arg COMMA . arg_list

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    $default  reduce using rule 118 (arg_list)

    expr          go to state 138
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51
    arg_list      go to state 171
    arg           go to state 140


State 158

   30 stmt: OUTPUT OC STR CC SCOL .

    $default  reduce using rule 30 (stmt)


State 159

   29 stmt: OUTPUT OC expr CC SCOL .

    $default  reduce using rule 29 (stmt)


State 160

   27 stmt: INPUT OC ID CC SCOL .

    $default  reduce using rule 27 (stmt)


State 161

   28 stmt: INPUT OC ID OS expr . CS CC SCOL
   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 172


State 162

   97 switch_stmt: SWITCH $@15 OC ID $@16 . CC OF case_stmt_list $@17 default_stmt CF

    CC  shift, and go to state 173


State 163

   84 if_stmt: IF $@6 OC expr CC . $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 81 ($@7)

    $@7  go to state 174


State 164

  108 while_loop_stmt: WHILE $@20 OC expr CC . $@21 OF $@22 stmt_list CF

    $default  reduce using rule 106 ($@21)

    $@21  go to state 175


State 165

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   79 assign: ID OS expr . CS ASSIGN expr

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CS          shift, and go to state 176


State 166

  113 for_loop_stmt: FOR OC assign SCOL $@23 . expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 177
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 167

   34 declaration: data_type ID OS INT_NUM CS . SCOL
   36            | data_type ID OS INT_NUM CS . ASSIGN $@4 OF arr_values CF SCOL

    SCOL    shift, and go to state 178
    ASSIGN  shift, and go to state 179


State 168

   33 declaration: data_type ID ASSIGN expr SCOL .

    $default  reduce using rule 33 (declaration)


State 169

   11 param_list: param $@3 COMMA param_list .

    $default  reduce using rule 11 (param_list)


State 170

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   79 assign: ID OS expr CS ASSIGN expr .

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89

    $default  reduce using rule 79 (assign)


State 171

  116 arg_list: arg COMMA arg_list .

    $default  reduce using rule 116 (arg_list)


State 172

   28 stmt: INPUT OC ID OS expr CS . CC SCOL

    CC  shift, and go to state 180


State 173

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC . OF case_stmt_list $@17 default_stmt CF

    OF  shift, and go to state 181


State 174

   84 if_stmt: IF $@6 OC expr CC $@7 . OF $@8 stmt_list CF $@9 elif_stmt else_stmt

    OF  shift, and go to state 182


State 175

  108 while_loop_stmt: WHILE $@20 OC expr CC $@21 . OF $@22 stmt_list CF

    OF  shift, and go to state 183


State 176

   79 assign: ID OS expr CS . ASSIGN expr

    ASSIGN  shift, and go to state 155


State 177

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
  113 for_loop_stmt: FOR OC assign SCOL $@23 expr . SCOL $@24 assign CC $@25 OF $@26 stmt_list CF

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    SCOL        shift, and go to state 184


State 178

   34 declaration: data_type ID OS INT_NUM CS SCOL .

    $default  reduce using rule 34 (declaration)


State 179

   36 declaration: data_type ID OS INT_NUM CS ASSIGN . $@4 OF arr_values CF SCOL

    $default  reduce using rule 35 ($@4)

    $@4  go to state 185


State 180

   28 stmt: INPUT OC ID OS expr CS CC . SCOL

    SCOL  shift, and go to state 186


State 181

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC OF . case_stmt_list $@17 default_stmt CF

    CASE  shift, and go to state 187

    $default  reduce using rule 99 (case_stmt_list)

    case_stmt_list  go to state 188
    case_stmt       go to state 189


State 182

   84 if_stmt: IF $@6 OC expr CC $@7 OF . $@8 stmt_list CF $@9 elif_stmt else_stmt

    $default  reduce using rule 82 ($@8)

    $@8  go to state 190


State 183

  108 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF . $@22 stmt_list CF

    $default  reduce using rule 107 ($@22)

    $@22  go to state 191


State 184

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL . $@24 assign CC $@25 OF $@26 stmt_list CF

    $default  reduce using rule 110 ($@24)

    $@24  go to state 192


State 185

   36 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 . OF arr_values CF SCOL

    OF  shift, and go to state 193


State 186

   28 stmt: INPUT OC ID OS expr CS CC SCOL .

    $default  reduce using rule 28 (stmt)


State 187

  102 case_stmt: CASE . $@18 OC const $@19 CC COLON stmt_list

    $default  reduce using rule 100 ($@18)

    $@18  go to state 194


State 188

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list . $@17 default_stmt CF

    $default  reduce using rule 96 ($@17)

    $@17  go to state 195


State 189

   98 case_stmt_list: case_stmt . case_stmt_list

    CASE  shift, and go to state 187

    $default  reduce using rule 99 (case_stmt_list)

    case_stmt_list  go to state 196
    case_stmt       go to state 189


State 190

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 . stmt_list CF $@9 elif_stmt else_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 197
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 191

  108 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 198
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 192

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 . assign CC $@25 OF $@26 stmt_list CF

    ID  shift, and go to state 109

    assign  go to state 199


State 193

   36 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF . arr_values CF SCOL

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    CHARACTER  shift, and go to state 25

    arr_values  go to state 200
    const       go to state 201


State 194

  102 case_stmt: CASE $@18 . OC const $@19 CC COLON stmt_list

    OC  shift, and go to state 202


State 195

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 . default_stmt CF

    DEFAULT  shift, and go to state 203

    $default  reduce using rule 104 (default_stmt)

    default_stmt  go to state 204


State 196

   98 case_stmt_list: case_stmt case_stmt_list .

    $default  reduce using rule 98 (case_stmt_list)


State 197

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list . CF $@9 elif_stmt else_stmt

    CF  shift, and go to state 205


State 198

  108 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list . CF

    CF  shift, and go to state 206


State 199

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign . CC $@25 OF $@26 stmt_list CF

    CC  shift, and go to state 207


State 200

   36 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values . CF SCOL

    CF  shift, and go to state 208


State 201

   38 arr_values: const . $@5 COMMA arr_values
   39           | const .

    CF        reduce using rule 39 (arr_values)
    $default  reduce using rule 37 ($@5)

    $@5  go to state 209


State 202

  102 case_stmt: CASE $@18 OC . const $@19 CC COLON stmt_list

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    CHARACTER  shift, and go to state 25

    const  go to state 210


State 203

  103 default_stmt: DEFAULT . COLON stmt_list

    COLON  shift, and go to state 211


State 204

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt . CF

    CF  shift, and go to state 212


State 205

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF . $@9 elif_stmt else_stmt

    $default  reduce using rule 83 ($@9)

    $@9  go to state 213


State 206

  108 while_loop_stmt: WHILE $@20 OC expr CC $@21 OF $@22 stmt_list CF .

    $default  reduce using rule 108 (while_loop_stmt)


State 207

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC . $@25 OF $@26 stmt_list CF

    $default  reduce using rule 111 ($@25)

    $@25  go to state 214


State 208

   36 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF . SCOL

    SCOL  shift, and go to state 215


State 209

   38 arr_values: const $@5 . COMMA arr_values

    COMMA  shift, and go to state 216


State 210

  102 case_stmt: CASE $@18 OC const . $@19 CC COLON stmt_list

    $default  reduce using rule 101 ($@19)

    $@19  go to state 217


State 211

  103 default_stmt: DEFAULT COLON . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 218
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 212

   97 switch_stmt: SWITCH $@15 OC ID $@16 CC OF case_stmt_list $@17 default_stmt CF .

    $default  reduce using rule 97 (switch_stmt)


State 213

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 . elif_stmt else_stmt

    ELIF  shift, and go to state 219

    $default  reduce using rule 90 (elif_stmt)

    elif_stmt  go to state 220


State 214

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 . OF $@26 stmt_list CF

    OF  shift, and go to state 221


State 215

   36 declaration: data_type ID OS INT_NUM CS ASSIGN $@4 OF arr_values CF SCOL .

    $default  reduce using rule 36 (declaration)


State 216

   38 arr_values: const $@5 COMMA . arr_values

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    CHARACTER  shift, and go to state 25

    arr_values  go to state 222
    const       go to state 201


State 217

  102 case_stmt: CASE $@18 OC const $@19 . CC COLON stmt_list

    CC  shift, and go to state 223


State 218

  103 default_stmt: DEFAULT COLON stmt_list .

    $default  reduce using rule 103 (default_stmt)


State 219

   89 elif_stmt: ELIF . $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 85 ($@10)

    $@10  go to state 224


State 220

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt . else_stmt

    ELSE  shift, and go to state 225

    $default  reduce using rule 93 (else_stmt)

    else_stmt  go to state 226


State 221

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF . $@26 stmt_list CF

    $default  reduce using rule 112 ($@26)

    $@26  go to state 227


State 222

   38 arr_values: const $@5 COMMA arr_values .

    $default  reduce using rule 38 (arr_values)


State 223

  102 case_stmt: CASE $@18 OC const $@19 CC . COLON stmt_list

    COLON  shift, and go to state 228


State 224

   89 elif_stmt: ELIF $@10 . OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    OC  shift, and go to state 229


State 225

   92 else_stmt: ELSE . OF $@14 stmt_list CF

    OF  shift, and go to state 230


State 226

   84 if_stmt: IF $@6 OC expr CC $@7 OF $@8 stmt_list CF $@9 elif_stmt else_stmt .

    $default  reduce using rule 84 (if_stmt)


State 227

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 231
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 228

  102 case_stmt: CASE $@18 OC const $@19 CC COLON . stmt_list

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 232
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 229

   89 elif_stmt: ELIF $@10 OC . expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 54
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26

    expr          go to state 233
    postfix_expr  go to state 41
    unary_expr    go to state 42
    primary_expr  go to state 43
    unary_op      go to state 44
    const         go to state 45
    func_call     go to state 51


State 230

   92 else_stmt: ELSE OF . $@14 stmt_list CF

    $default  reduce using rule 91 ($@14)

    $@14  go to state 234


State 231

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list . CF

    CF  shift, and go to state 235


State 232

  102 case_stmt: CASE $@18 OC const $@19 CC COLON stmt_list .

    $default  reduce using rule 102 (case_stmt)


State 233

   44 expr: expr . ADD expr
   45     | expr . SUBTRACT expr
   46     | expr . MULTIPLY expr
   47     | expr . DIVIDE expr
   48     | expr . LE expr
   49     | expr . GE expr
   50     | expr . LT expr
   51     | expr . GT expr
   52     | expr . EQ expr
   53     | expr . NE expr
   54     | expr . AND expr
   55     | expr . OR expr
   56     | expr . MODULO expr
   57     | expr . BITAND expr
   58     | expr . BITOR expr
   59     | expr . XOR expr
   60     | expr . LEFTSHIFT expr
   61     | expr . RIGHTSHIFT expr
   89 elif_stmt: ELIF $@10 OC expr . CC $@11 OF $@12 stmt_list CF $@13 elif_stmt

    LEFTSHIFT   shift, and go to state 72
    RIGHTSHIFT  shift, and go to state 73
    LE          shift, and go to state 74
    GE          shift, and go to state 75
    EQ          shift, and go to state 76
    NE          shift, and go to state 77
    GT          shift, and go to state 78
    LT          shift, and go to state 79
    AND         shift, and go to state 80
    OR          shift, and go to state 81
    ADD         shift, and go to state 82
    SUBTRACT    shift, and go to state 83
    DIVIDE      shift, and go to state 84
    MULTIPLY    shift, and go to state 85
    MODULO      shift, and go to state 86
    BITAND      shift, and go to state 87
    BITOR       shift, and go to state 88
    XOR         shift, and go to state 89
    CC          shift, and go to state 236


State 234

   92 else_stmt: ELSE OF $@14 . stmt_list CF

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 237
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 235

  113 for_loop_stmt: FOR OC assign SCOL $@23 expr SCOL $@24 assign CC $@25 OF $@26 stmt_list CF .

    $default  reduce using rule 113 (for_loop_stmt)


State 236

   89 elif_stmt: ELIF $@10 OC expr CC . $@11 OF $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 86 ($@11)

    $@11  go to state 238


State 237

   92 else_stmt: ELSE OF $@14 stmt_list . CF

    CF  shift, and go to state 239


State 238

   89 elif_stmt: ELIF $@10 OC expr CC $@11 . OF $@12 stmt_list CF $@13 elif_stmt

    OF  shift, and go to state 240


State 239

   92 else_stmt: ELSE OF $@14 stmt_list CF .

    $default  reduce using rule 92 (else_stmt)


State 240

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF . $@12 stmt_list CF $@13 elif_stmt

    $default  reduce using rule 87 ($@12)

    $@12  go to state 241


State 241

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 . stmt_list CF $@13 elif_stmt

    INT        shift, and go to state 4
    CHAR       shift, and go to state 5
    FLOAT      shift, and go to state 6
    STRING     shift, and go to state 16
    RETURN     shift, and go to state 17
    INT_NUM    shift, and go to state 18
    FLOAT_NUM  shift, and go to state 19
    ID         shift, and go to state 20
    NOT        shift, and go to state 21
    ADD        shift, and go to state 22
    SUBTRACT   shift, and go to state 23
    NEGATION   shift, and go to state 24
    CHARACTER  shift, and go to state 25
    OC         shift, and go to state 26
    OUTPUT     shift, and go to state 27
    INPUT      shift, and go to state 28
    SWITCH     shift, and go to state 29
    BREAK      shift, and go to state 30
    IF         shift, and go to state 31
    WHILE      shift, and go to state 32
    FOR        shift, and go to state 33
    CONTINUE   shift, and go to state 34

    $default  reduce using rule 16 (stmt_list)

    stmt_list        go to state 242
    stmt             go to state 36
    declaration      go to state 37
    return_stmt      go to state 38
    data_type        go to state 39
    expr             go to state 40
    postfix_expr     go to state 41
    unary_expr       go to state 42
    primary_expr     go to state 43
    unary_op         go to state 44
    const            go to state 45
    assign           go to state 46
    if_stmt          go to state 47
    switch_stmt      go to state 48
    while_loop_stmt  go to state 49
    for_loop_stmt    go to state 50
    func_call        go to state 51


State 242

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list . CF $@13 elif_stmt

    CF  shift, and go to state 243


State 243

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF . $@13 elif_stmt

    $default  reduce using rule 88 ($@13)

    $@13  go to state 244


State 244

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 . elif_stmt

    ELIF  shift, and go to state 219

    $default  reduce using rule 90 (elif_stmt)

    elif_stmt  go to state 245


State 245

   89 elif_stmt: ELIF $@10 OC expr CC $@11 OF $@12 stmt_list CF $@13 elif_stmt .

    $default  reduce using rule 89 (elif_stmt)
