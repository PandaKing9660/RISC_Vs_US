/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_Register_BUS #(
    parameter Bits = 1
)
(
    input C,
    input en,
    input [(Bits - 1):0]D,
    output [(Bits - 1):0]Q
);

    reg [(Bits - 1):0] state = 'h0;

    assign Q = state;

    always @ (posedge C) begin
        if (en)
            state <= D;
   end
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule

module DIG_RAMDualPort
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
  input [(AddrBits-1):0] A,
  input [(Bits-1):0] Din,
  input str,
  input C,
  input ld,
  output [(Bits-1):0] D
);
  reg [(Bits-1):0] memory[0:((1 << AddrBits) - 1)];

  assign D = ld? memory[A] : 'hz;

  always @ (posedge C) begin
    if (str)
      memory[A] <= Din;
  end
endmodule

module DIG_RegisterFile
#(
    parameter Bits = 8,
    parameter AddrBits = 4
)
(
    input [(Bits-1):0] Din,
    input we,
    input [(AddrBits-1):0] Rw,
    input C,
    input [(AddrBits-1):0] Ra,
    input [(AddrBits-1):0] Rb,
    output [(Bits-1):0] Da,
    output [(Bits-1):0] Db
);

    reg [(Bits-1):0] memory[0:((1 << AddrBits)-1)];

    assign Da = memory[Ra];
    assign Db = memory[Rb];

    always @ (posedge C) begin
        if (we)
            memory[Rw] <= Din;
    end
endmodule


module RegFile32Bit (
  input [31:0] DataToWrite,
  input writeEnable,
  input [4:0] writeReg,
  input [4:0] Read1,
  input [4:0] Read2,
  input CPU_clock,
  output [31:0] Register1,
  output [31:0] Register2
);
  // RegFile
  DIG_RegisterFile #(
    .Bits(32),
    .AddrBits(5)
  )
  DIG_RegisterFile_i0 (
    .Din( DataToWrite ),
    .we( writeEnable ),
    .Rw( writeReg ),
    .C( CPU_clock ),
    .Ra( Read1 ),
    .Rb( Read2 ),
    .Da( Register1 ),
    .Db( Register2 )
  );
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module ImmGenU (
  input [31:0] in,
  output [31:0] out
);
  assign out[11:0] = 12'b0;
  assign out[31:12] = in[31:12];
endmodule
module DIG_BitExtender #(
    parameter inputBits = 2,
    parameter outputBits = 4
)
(
    input [(inputBits-1):0] in,
    output [(outputBits - 1):0] out
);
    assign out = {{(outputBits - inputBits){in[inputBits - 1]}}, in};
endmodule




module ImmGenJ (
  input [31:0] in,
  output [31:0] out
);
  wire [20:0] s0;
  assign s0[0] = 1'b0;
  assign s0[10:1] = in[30:21];
  assign s0[11] = in[20];
  assign s0[19:12] = in[19:12];
  assign s0[20] = in[31];
  DIG_BitExtender #(
    .inputBits(21),
    .outputBits(32)
  )
  DIG_BitExtender_i0 (
    .in( s0 ),
    .out( out )
  );
endmodule

module ImmGenB (
  input [31:0] in,
  output [31:0] out
);
  wire [12:0] s0;
  assign s0[0] = 1'b0;
  assign s0[4:1] = in[11:8];
  assign s0[10:5] = in[30:25];
  assign s0[11] = in[7];
  assign s0[12] = in[31];
  DIG_BitExtender #(
    .inputBits(13),
    .outputBits(32)
  )
  DIG_BitExtender_i0 (
    .in( s0 ),
    .out( out )
  );
endmodule

module ImmGenS (
  input [31:0] in,
  output [31:0] out
);
  wire [11:0] s0;
  assign s0[4:0] = in[11:7];
  assign s0[11:5] = in[31:25];
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(32)
  )
  DIG_BitExtender_i0 (
    .in( s0 ),
    .out( out )
  );
endmodule

module ImmGenI (
  input [31:0] in,
  output [31:0] out
);
  wire [11:0] s0;
  assign s0 = in[31:20];
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(32)
  )
  DIG_BitExtender_i0 (
    .in( s0 ),
    .out( out )
  );
endmodule

module And7Bit (
  input I0,
  input I1,
  input I2,
  input I3,
  input I4,
  input I5,
  input I6,
  output O
);
  assign O = (((I0 & I1) & (I2 & I3)) & ((I4 & I5) & (I6 & 1'b1)));
endmodule
module PriorityEncoder3 (
    input in0,
    input in1,
    input in2,
    input in3,
    input in4,
    input in5,
    input in6,
    input in7,
    output reg [2:0] num,
    output any
);
    always @ (*) begin
        if (in7 == 1'b1)
            num = 3'h7;
        else if (in6 == 1'b1)
            num = 3'h6;
        else if (in5 == 1'b1)
            num = 3'h5;
        else if (in4 == 1'b1)
            num = 3'h4;
        else if (in3 == 1'b1)
            num = 3'h3;
        else if (in2 == 1'b1)
            num = 3'h2;
        else if (in1 == 1'b1)
            num = 3'h1;
        else 
            num = 3'h0;
    end

    assign any = in0 | in1 | in2 | in3 | in4 | in5 | in6 | in7;
endmodule


module Mux_8x1_NBits #(
    parameter Bits = 2
)
(
    input [2:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    input [(Bits - 1):0] in_4,
    input [(Bits - 1):0] in_5,
    input [(Bits - 1):0] in_6,
    input [(Bits - 1):0] in_7,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module ImmediateGenerator (
  input [31:0] Ins,
  output [31:0] imm
);
  wire [6:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire [31:0] s31;
  wire [2:0] s32;
  wire [31:0] s33;
  wire [31:0] s34;
  wire [31:0] s35;
  wire [31:0] s36;
  ImmGenU ImmGenU_i0 (
    .in( Ins ),
    .out( s31 )
  );
  ImmGenJ ImmGenJ_i1 (
    .in( Ins ),
    .out( s36 )
  );
  ImmGenB ImmGenB_i2 (
    .in( Ins ),
    .out( s35 )
  );
  ImmGenS ImmGenS_i3 (
    .in( Ins ),
    .out( s34 )
  );
  ImmGenI ImmGenI_i4 (
    .in( Ins ),
    .out( s33 )
  );
  assign s0 = Ins[6:0];
  assign s1 = s0[0];
  assign s2 = s0[1];
  assign s3 = s0[2];
  assign s4 = s0[3];
  assign s5 = s0[4];
  assign s6 = s0[5];
  assign s7 = s0[6];
  assign s9 = ~ s7;
  assign s8 = ~ s4;
  assign s11 = ~ s5;
  assign s15 = ~ s5;
  assign s14 = ~ s4;
  assign s13 = ~ s3;
  assign s17 = ~ s7;
  assign s20 = ~ s5;
  assign s18 = ~ s3;
  assign s19 = ~ s4;
  assign s23 = ~ s5;
  assign s22 = ~ s4;
  assign s28 = ~ s7;
  assign s27 = ~ s6;
  assign s26 = ~ s4;
  assign s25 = ~ s3;
  // U
  And7Bit And7Bit_i5 (
    .I0( s1 ),
    .I1( s2 ),
    .I2( s3 ),
    .I3( s8 ),
    .I4( s5 ),
    .I5( 1'b1 ),
    .I6( s9 ),
    .O( s10 )
  );
  // J
  And7Bit And7Bit_i6 (
    .I0( s1 ),
    .I1( s2 ),
    .I2( s3 ),
    .I3( s4 ),
    .I4( s11 ),
    .I5( s6 ),
    .I6( s7 ),
    .O( s12 )
  );
  // B
  And7Bit And7Bit_i7 (
    .I0( s1 ),
    .I1( s2 ),
    .I2( s13 ),
    .I3( s14 ),
    .I4( s15 ),
    .I5( s6 ),
    .I6( s7 ),
    .O( s16 )
  );
  // S
  And7Bit And7Bit_i8 (
    .I0( s1 ),
    .I1( s2 ),
    .I2( s18 ),
    .I3( s19 ),
    .I4( s20 ),
    .I5( s6 ),
    .I6( s17 ),
    .O( s21 )
  );
  // I1
  And7Bit And7Bit_i9 (
    .I0( s1 ),
    .I1( s2 ),
    .I2( s3 ),
    .I3( s22 ),
    .I4( s23 ),
    .I5( s6 ),
    .I6( s7 ),
    .O( s24 )
  );
  // I23
  And7Bit And7Bit_i10 (
    .I0( s1 ),
    .I1( s2 ),
    .I2( s25 ),
    .I3( s26 ),
    .I4( 1'b1 ),
    .I5( s27 ),
    .I6( s28 ),
    .O( s29 )
  );
  assign s30 = (s29 | s24);
  // opr
  PriorityEncoder3 PriorityEncoder3_i11 (
    .in0( 1'b1 ),
    .in1( 1'b1 ),
    .in2( 1'b1 ),
    .in3( s30 ),
    .in4( s21 ),
    .in5( s16 ),
    .in6( s12 ),
    .in7( s10 ),
    .num( s32 )
  );
  Mux_8x1_NBits #(
    .Bits(32)
  )
  Mux_8x1_NBits_i12 (
    .sel( s32 ),
    .in_0( 32'b0 ),
    .in_1( 32'b0 ),
    .in_2( 32'b0 ),
    .in_3( s33 ),
    .in_4( s34 ),
    .in_5( s35 ),
    .in_6( s36 ),
    .in_7( s31 ),
    .out( imm )
  );
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module Mux_8x1
(
    input [2:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    input in_4,
    input in_5,
    input in_6,
    input in_7,
    output reg out
);
    always @ (*) begin
        case (sel)
            3'h0: out = in_0;
            3'h1: out = in_1;
            3'h2: out = in_2;
            3'h3: out = in_3;
            3'h4: out = in_4;
            3'h5: out = in_5;
            3'h6: out = in_6;
            3'h7: out = in_7;
            default:
                out = 'h0;
        endcase
    end
endmodule


module ALU1Bit (
  input a,
  input b,
  input [3:0] Oper,
  input C_in,
  output c_out,
  output res,
  output zero
);
  wire s0;
  wire s1;
  wire s2;
  wire [2:0] s3;
  wire s4;
  wire res_temp;
  assign s0 = (b ^ Oper[2]);
  assign s3[0] = Oper[0];
  assign s3[1] = Oper[1];
  assign s3[2] = Oper[3];
  assign s1 = (a & s0);
  assign s2 = (a | s0);
  DIG_Add #(
    .Bits(1)
  )
  DIG_Add_i0 (
    .a( a ),
    .b( s0 ),
    .c_i( C_in ),
    .s( s4 ),
    .c_o( c_out )
  );
  Mux_8x1 Mux_8x1_i1 (
    .sel( s3 ),
    .in_0( s1 ),
    .in_1( s2 ),
    .in_2( s4 ),
    .in_3( 1'b0 ),
    .in_4( 1'b0 ),
    .in_5( 1'b0 ),
    .in_6( 1'b0 ),
    .in_7( 1'b0 ),
    .out( res_temp )
  );
  assign zero = ~ res_temp;
  assign res = res_temp;
endmodule

module ALU32Bit (
  input [3:0] Operation,
  input [31:0] a,
  input [31:0] b,
  output c_out,
  output [31:0] ALU_out,
  output zero
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire s38;
  wire s39;
  wire s40;
  wire s41;
  wire s42;
  wire s43;
  wire s44;
  wire s45;
  wire s46;
  wire s47;
  wire s48;
  wire s49;
  wire s50;
  wire s51;
  wire s52;
  wire s53;
  wire s54;
  wire s55;
  wire s56;
  wire s57;
  wire s58;
  wire s59;
  wire s60;
  wire s61;
  wire s62;
  wire s63;
  wire s64;
  wire s65;
  wire s66;
  wire s67;
  wire s68;
  wire s69;
  wire s70;
  wire s71;
  wire s72;
  wire s73;
  wire s74;
  wire s75;
  wire s76;
  wire s77;
  wire s78;
  wire s79;
  wire s80;
  wire s81;
  wire s82;
  wire s83;
  wire s84;
  wire s85;
  wire s86;
  wire s87;
  wire s88;
  wire s89;
  wire s90;
  wire s91;
  wire s92;
  wire s93;
  wire s94;
  wire s95;
  wire s96;
  wire s97;
  wire s98;
  wire s99;
  wire s100;
  wire s101;
  wire s102;
  wire s103;
  wire s104;
  wire s105;
  wire s106;
  wire s107;
  wire s108;
  wire s109;
  wire s110;
  wire s111;
  wire s112;
  wire s113;
  wire s114;
  wire s115;
  wire s116;
  wire s117;
  wire s118;
  wire s119;
  wire s120;
  wire s121;
  wire s122;
  wire s123;
  wire s124;
  wire s125;
  wire s126;
  wire s127;
  wire s128;
  wire s129;
  wire s130;
  wire s131;
  wire s132;
  wire s133;
  wire s134;
  wire s135;
  wire s136;
  wire s137;
  wire s138;
  wire s139;
  wire s140;
  wire s141;
  wire s142;
  wire s143;
  wire s144;
  wire s145;
  wire s146;
  wire s147;
  wire s148;
  wire s149;
  wire s150;
  wire s151;
  wire s152;
  wire s153;
  wire s154;
  wire s155;
  wire s156;
  wire s157;
  wire s158;
  assign s0 = a[0];
  assign s6 = a[1];
  assign s11 = a[2];
  assign s16 = a[3];
  assign s21 = a[4];
  assign s26 = a[5];
  assign s31 = a[6];
  assign s36 = a[7];
  assign s41 = a[8];
  assign s46 = a[9];
  assign s51 = a[10];
  assign s56 = a[11];
  assign s61 = a[12];
  assign s65 = a[13];
  assign s70 = a[14];
  assign s75 = a[15];
  assign s80 = a[16];
  assign s85 = a[17];
  assign s90 = a[18];
  assign s155 = a[19];
  assign s95 = a[20];
  assign s101 = a[21];
  assign s106 = a[22];
  assign s111 = a[23];
  assign s116 = a[24];
  assign s121 = a[25];
  assign s126 = a[26];
  assign s131 = a[27];
  assign s136 = a[28];
  assign s141 = a[29];
  assign s146 = a[30];
  assign s151 = a[31];
  assign s1 = b[0];
  assign s7 = b[1];
  assign s12 = b[2];
  assign s17 = b[3];
  assign s22 = b[4];
  assign s27 = b[5];
  assign s32 = b[6];
  assign s37 = b[7];
  assign s42 = b[8];
  assign s47 = b[9];
  assign s52 = b[10];
  assign s57 = b[11];
  assign s62 = b[12];
  assign s66 = b[13];
  assign s71 = b[14];
  assign s76 = b[15];
  assign s81 = b[16];
  assign s86 = b[17];
  assign s91 = b[18];
  assign s156 = b[19];
  assign s96 = b[20];
  assign s102 = b[21];
  assign s107 = b[22];
  assign s112 = b[23];
  assign s117 = b[24];
  assign s122 = b[25];
  assign s127 = b[26];
  assign s132 = b[27];
  assign s137 = b[28];
  assign s142 = b[29];
  assign s147 = b[30];
  assign s152 = b[31];
  assign s2 = Operation[2];
  ALU1Bit ALU1Bit_i0 (
    .a( s0 ),
    .b( s1 ),
    .Oper( Operation ),
    .C_in( s2 ),
    .c_out( s3 ),
    .res( s4 ),
    .zero( s5 )
  );
  ALU1Bit ALU1Bit_i1 (
    .a( s6 ),
    .b( s7 ),
    .Oper( Operation ),
    .C_in( s3 ),
    .c_out( s8 ),
    .res( s9 ),
    .zero( s10 )
  );
  ALU1Bit ALU1Bit_i2 (
    .a( s11 ),
    .b( s12 ),
    .Oper( Operation ),
    .C_in( s8 ),
    .c_out( s13 ),
    .res( s14 ),
    .zero( s15 )
  );
  ALU1Bit ALU1Bit_i3 (
    .a( s16 ),
    .b( s17 ),
    .Oper( Operation ),
    .C_in( s13 ),
    .c_out( s18 ),
    .res( s19 ),
    .zero( s20 )
  );
  ALU1Bit ALU1Bit_i4 (
    .a( s21 ),
    .b( s22 ),
    .Oper( Operation ),
    .C_in( s18 ),
    .c_out( s23 ),
    .res( s24 ),
    .zero( s25 )
  );
  ALU1Bit ALU1Bit_i5 (
    .a( s26 ),
    .b( s27 ),
    .Oper( Operation ),
    .C_in( s23 ),
    .c_out( s28 ),
    .res( s29 ),
    .zero( s30 )
  );
  ALU1Bit ALU1Bit_i6 (
    .a( s31 ),
    .b( s32 ),
    .Oper( Operation ),
    .C_in( s28 ),
    .c_out( s33 ),
    .res( s34 ),
    .zero( s35 )
  );
  ALU1Bit ALU1Bit_i7 (
    .a( s36 ),
    .b( s37 ),
    .Oper( Operation ),
    .C_in( s33 ),
    .c_out( s38 ),
    .res( s39 ),
    .zero( s40 )
  );
  ALU1Bit ALU1Bit_i8 (
    .a( s41 ),
    .b( s42 ),
    .Oper( Operation ),
    .C_in( s38 ),
    .c_out( s43 ),
    .res( s44 ),
    .zero( s45 )
  );
  ALU1Bit ALU1Bit_i9 (
    .a( s46 ),
    .b( s47 ),
    .Oper( Operation ),
    .C_in( s43 ),
    .c_out( s48 ),
    .res( s49 ),
    .zero( s50 )
  );
  ALU1Bit ALU1Bit_i10 (
    .a( s51 ),
    .b( s52 ),
    .Oper( Operation ),
    .C_in( s48 ),
    .c_out( s53 ),
    .res( s54 ),
    .zero( s55 )
  );
  ALU1Bit ALU1Bit_i11 (
    .a( s56 ),
    .b( s57 ),
    .Oper( Operation ),
    .C_in( s53 ),
    .c_out( s58 ),
    .res( s59 ),
    .zero( s60 )
  );
  ALU1Bit ALU1Bit_i12 (
    .a( s61 ),
    .b( s62 ),
    .Oper( Operation ),
    .C_in( s58 ),
    .c_out( s63 ),
    .res( s64 )
  );
  ALU1Bit ALU1Bit_i13 (
    .a( s65 ),
    .b( s66 ),
    .Oper( Operation ),
    .C_in( s63 ),
    .c_out( s67 ),
    .res( s68 ),
    .zero( s69 )
  );
  ALU1Bit ALU1Bit_i14 (
    .a( s70 ),
    .b( s71 ),
    .Oper( Operation ),
    .C_in( s67 ),
    .c_out( s72 ),
    .res( s73 ),
    .zero( s74 )
  );
  ALU1Bit ALU1Bit_i15 (
    .a( s75 ),
    .b( s76 ),
    .Oper( Operation ),
    .C_in( s72 ),
    .c_out( s77 ),
    .res( s78 ),
    .zero( s79 )
  );
  ALU1Bit ALU1Bit_i16 (
    .a( s80 ),
    .b( s81 ),
    .Oper( Operation ),
    .C_in( s77 ),
    .c_out( s82 ),
    .res( s83 ),
    .zero( s84 )
  );
  ALU1Bit ALU1Bit_i17 (
    .a( s85 ),
    .b( s86 ),
    .Oper( Operation ),
    .C_in( s82 ),
    .c_out( s87 ),
    .res( s88 ),
    .zero( s89 )
  );
  ALU1Bit ALU1Bit_i18 (
    .a( s90 ),
    .b( s91 ),
    .Oper( Operation ),
    .C_in( s87 ),
    .c_out( s92 ),
    .res( s93 ),
    .zero( s94 )
  );
  ALU1Bit ALU1Bit_i19 (
    .a( s155 ),
    .b( s156 ),
    .Oper( Operation ),
    .C_in( s92 ),
    .c_out( s97 ),
    .res( s157 ),
    .zero( s158 )
  );
  ALU1Bit ALU1Bit_i20 (
    .a( s95 ),
    .b( s96 ),
    .Oper( Operation ),
    .C_in( s97 ),
    .c_out( s98 ),
    .res( s99 ),
    .zero( s100 )
  );
  ALU1Bit ALU1Bit_i21 (
    .a( s101 ),
    .b( s102 ),
    .Oper( Operation ),
    .C_in( s98 ),
    .c_out( s103 ),
    .res( s104 ),
    .zero( s105 )
  );
  ALU1Bit ALU1Bit_i22 (
    .a( s106 ),
    .b( s107 ),
    .Oper( Operation ),
    .C_in( s103 ),
    .c_out( s108 ),
    .res( s109 ),
    .zero( s110 )
  );
  ALU1Bit ALU1Bit_i23 (
    .a( s111 ),
    .b( s112 ),
    .Oper( Operation ),
    .C_in( s108 ),
    .c_out( s113 ),
    .res( s114 ),
    .zero( s115 )
  );
  ALU1Bit ALU1Bit_i24 (
    .a( s116 ),
    .b( s117 ),
    .Oper( Operation ),
    .C_in( s113 ),
    .c_out( s118 ),
    .res( s119 ),
    .zero( s120 )
  );
  ALU1Bit ALU1Bit_i25 (
    .a( s121 ),
    .b( s122 ),
    .Oper( Operation ),
    .C_in( s118 ),
    .c_out( s123 ),
    .res( s124 ),
    .zero( s125 )
  );
  ALU1Bit ALU1Bit_i26 (
    .a( s126 ),
    .b( s127 ),
    .Oper( Operation ),
    .C_in( s123 ),
    .c_out( s128 ),
    .res( s129 ),
    .zero( s130 )
  );
  ALU1Bit ALU1Bit_i27 (
    .a( s131 ),
    .b( s132 ),
    .Oper( Operation ),
    .C_in( s128 ),
    .c_out( s133 ),
    .res( s134 ),
    .zero( s135 )
  );
  ALU1Bit ALU1Bit_i28 (
    .a( s136 ),
    .b( s137 ),
    .Oper( Operation ),
    .C_in( s133 ),
    .c_out( s138 ),
    .res( s139 ),
    .zero( s140 )
  );
  ALU1Bit ALU1Bit_i29 (
    .a( s141 ),
    .b( s142 ),
    .Oper( Operation ),
    .C_in( s138 ),
    .c_out( s143 ),
    .res( s144 ),
    .zero( s145 )
  );
  ALU1Bit ALU1Bit_i30 (
    .a( s146 ),
    .b( s147 ),
    .Oper( Operation ),
    .C_in( s143 ),
    .c_out( s148 ),
    .res( s149 ),
    .zero( s150 )
  );
  ALU1Bit ALU1Bit_i31 (
    .a( s151 ),
    .b( s152 ),
    .Oper( Operation ),
    .C_in( s148 ),
    .c_out( c_out ),
    .res( s153 ),
    .zero( s154 )
  );
  assign ALU_out[0] = s4;
  assign ALU_out[1] = s9;
  assign ALU_out[2] = s14;
  assign ALU_out[3] = s19;
  assign ALU_out[4] = s24;
  assign ALU_out[5] = s29;
  assign ALU_out[6] = s34;
  assign ALU_out[7] = s39;
  assign ALU_out[8] = s44;
  assign ALU_out[9] = s49;
  assign ALU_out[10] = s54;
  assign ALU_out[11] = s59;
  assign ALU_out[12] = s64;
  assign ALU_out[13] = s68;
  assign ALU_out[14] = s73;
  assign ALU_out[15] = s78;
  assign ALU_out[16] = s83;
  assign ALU_out[17] = s88;
  assign ALU_out[18] = s93;
  assign ALU_out[19] = s157;
  assign ALU_out[20] = s99;
  assign ALU_out[21] = s104;
  assign ALU_out[22] = s109;
  assign ALU_out[23] = s114;
  assign ALU_out[24] = s119;
  assign ALU_out[25] = s124;
  assign ALU_out[26] = s129;
  assign ALU_out[27] = s134;
  assign ALU_out[28] = s139;
  assign ALU_out[29] = s144;
  assign ALU_out[30] = s149;
  assign ALU_out[31] = s153;
  assign zero = (s5 & s10 & s15 & s20 & s25 & s30 & s35 & s40 & s45 & s50 & s55 & s60 & s69 & s74 & s79 & s84 & s89 & s94 & s92 & s158 & s100 & s105 & s110 & s115 & s120 & s125 & s130 & s135 & s140 & s145 & s150 & s154);
endmodule

module OPCodeControlUnit (
  input I0,
  input I1,
  input I2,
  input I3,
  input I4,
  input I5,
  input I6,
  input S_0,
  input S_1,
  input S_2,
  input S_3,
  output PCWrite,
  output PCWriteCond,
  output IorD,
  output MemWrite,
  output MemRead,
  output IRWrite,
  output MemtoReg,
  output PCSource0,
  output PCSource1,
  output ALUOp0,
  output ALUOp1,
  output ALUSrcB1,
  output ALUSrcB0,
  output ALUSrcA,
  output RegWrite,
  output NS_0,
  output NS_1,
  output NS_2,
  output NS_3
);
  wire s0;
  wire s1;
  wire s2;
  wire R_Type;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire lw;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire sw;
  wire s12;
  wire s13;
  wire s14;
  wire beq;
  wire S_0_D;
  wire S_1_D;
  wire S_2_D;
  wire S_3_D;
  wire ALUSrcB0_temp;
  wire State_1;
  wire State_2;
  wire s15;
  wire MemtoReg_temp;
  wire MemWrite_temp;
  wire ALUOp1_temp;
  wire State_7;
  wire ALUOp0_temp;
  wire PCSource0_temp;
  wire NextState_0;
  wire NextState_3;
  wire NextState_5;
  wire NextState_6;
  assign s2 = ~ I6;
  assign s1 = ~ I3;
  assign s0 = ~ I2;
  assign s7 = ~ I6;
  assign s6 = ~ I5;
  assign s5 = ~ I4;
  assign s4 = ~ I3;
  assign s3 = ~ I2;
  assign s11 = ~ I6;
  assign s10 = ~ I4;
  assign s9 = ~ I3;
  assign s8 = ~ I2;
  assign s14 = ~ I4;
  assign s13 = ~ I3;
  assign s12 = ~ I2;
  assign S_0_D = ~ S_0;
  assign S_1_D = ~ S_1;
  assign S_2_D = ~ S_2;
  assign S_3_D = ~ S_3;
  // R-Front
  And7Bit And7Bit_i0 (
    .I0( I0 ),
    .I1( I1 ),
    .I2( s0 ),
    .I3( s1 ),
    .I4( I4 ),
    .I5( I5 ),
    .I6( s2 ),
    .O( R_Type )
  );
  // lw
  And7Bit And7Bit_i1 (
    .I0( I0 ),
    .I1( I1 ),
    .I2( s3 ),
    .I3( s4 ),
    .I4( s5 ),
    .I5( s6 ),
    .I6( s7 ),
    .O( lw )
  );
  // sw
  And7Bit And7Bit_i2 (
    .I0( I0 ),
    .I1( I1 ),
    .I2( s8 ),
    .I3( s9 ),
    .I4( s10 ),
    .I5( I5 ),
    .I6( s11 ),
    .O( sw )
  );
  // beq
  And7Bit And7Bit_i3 (
    .I0( I0 ),
    .I1( I1 ),
    .I2( s12 ),
    .I3( s13 ),
    .I4( s14 ),
    .I5( I5 ),
    .I6( I6 ),
    .O( beq )
  );
  assign ALUSrcB0_temp = (S_0_D & S_1_D & S_2_D & S_3_D);
  assign State_1 = (S_0 & S_1_D & S_2_D & S_3_D);
  assign State_2 = (S_0_D & S_1 & S_2_D & S_3_D);
  assign s15 = (S_0 & S_1 & S_2_D & S_3_D);
  assign MemtoReg_temp = (S_0_D & S_1_D & S_2 & S_3_D);
  assign MemWrite_temp = (S_0 & S_1_D & S_2 & S_3_D);
  assign ALUOp1_temp = (S_0_D & S_1 & S_2 & S_3_D);
  assign State_7 = (S_0 & S_1 & S_2 & S_3_D);
  assign ALUOp0_temp = (S_0_D & S_1_D & S_2_D & S_3);
  assign PCSource0_temp = (S_0 & S_1_D & S_2_D & S_3);
  assign PCWrite = (ALUSrcB0_temp | PCSource0_temp);
  assign IorD = (s15 | MemWrite_temp);
  assign MemRead = (s15 | ALUSrcB0_temp);
  assign ALUSrcB1 = (State_1 | State_2);
  assign ALUSrcA = (State_2 | ALUOp1_temp | ALUOp0_temp);
  assign RegWrite = (MemtoReg_temp | State_7);
  assign NextState_0 = (MemtoReg_temp | MemWrite_temp | State_7 | ALUOp0_temp | PCSource0_temp);
  assign NextState_3 = (State_2 & lw);
  assign NextState_5 = (State_2 & sw);
  assign NextState_6 = (State_1 & R_Type);
  assign NS_3 = (State_1 & beq);
  assign NS_0 = (ALUSrcB0_temp | NextState_3 | NextState_5 | ALUOp1_temp);
  assign NS_1 = ((State_1 & (lw | sw)) | NextState_3 | NextState_6 | ALUOp1_temp);
  assign NS_2 = (s15 | NextState_5 | NextState_6 | ALUOp1_temp);
  assign PCWriteCond = ALUOp0_temp;
  assign MemWrite = MemWrite_temp;
  assign IRWrite = ALUSrcB0_temp;
  assign MemtoReg = MemtoReg_temp;
  assign PCSource0 = PCSource0_temp;
  assign PCSource1 = ALUOp0_temp;
  assign ALUOp0 = ALUOp0_temp;
  assign ALUOp1 = ALUOp1_temp;
  assign ALUSrcB0 = ALUSrcB0_temp;
endmodule

module And4bit (
  input a0,
  input a1,
  input a2,
  input a3,
  output out
);
  assign out = ((a0 & a1) & (a2 & a3));
endmodule

module Or4bit (
  input a0,
  input a1,
  input a2,
  input a3,
  output out
);
  assign out = ((a0 | a1) | (a2 | a3));
endmodule

module Or6bit (
  input a0,
  input a1,
  input a2,
  input a3,
  input a4,
  input a5,
  output out
);
  assign out = (((a0 | a1) | (a2 | a3)) | (a4 | a5));
endmodule

module alu_control_unit_2 (
  input [1:0] ALUop,
  input [3:0] F,
  input Itype,
  output [3:0] Operation
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  assign s5 = (Itype & F[3]);
  assign s0 = ALUop[0];
  assign s1 = ALUop[1];
  assign s2 = F[0];
  assign s3 = F[1];
  assign s4 = F[2];
  assign s6 = (s0 & ~ s1);
  assign s7 = (~ s0 & ~ s1);
  assign s8 = (~ s0 & s1);
  assign s13 = ~ s5;
  assign s12 = ~ s4;
  assign s11 = ~ s2;
  assign s17 = ~ s4;
  assign s16 = ~ s3;
  assign s15 = ~ s2;
  assign s24 = ~ s5;
  assign s23 = ~ s4;
  assign s22 = ~ s3;
  assign s21 = ~ s2;
  assign s28 = ~ s5;
  assign s27 = ~ s2;
  // 0010
  And4bit And4bit_i0 (
    .a0( s11 ),
    .a1( s3 ),
    .a2( s12 ),
    .a3( s13 ),
    .out( s14 )
  );
  // 1000
  And4bit And4bit_i1 (
    .a0( s15 ),
    .a1( s16 ),
    .a2( s17 ),
    .a3( s5 ),
    .out( s18 )
  );
  // 0000
  And4bit And4bit_i2 (
    .a0( s21 ),
    .a1( s22 ),
    .a2( s23 ),
    .a3( s24 ),
    .out( s25 )
  );
  // 0X10
  And4bit And4bit_i3 (
    .a0( s27 ),
    .a1( s3 ),
    .a2( 1'b1 ),
    .a3( s28 ),
    .out( s29 )
  );
  assign s20 = (s8 & s14);
  assign s19 = (s8 & s18);
  assign s26 = (s8 & s25);
  Or4bit Or4bit_i4 (
    .a0( s6 ),
    .a1( s19 ),
    .a2( s20 ),
    .a3( 1'b0 ),
    .out( s10 )
  );
  Or6bit Or6bit_i5 (
    .a0( s6 ),
    .a1( s7 ),
    .a2( s26 ),
    .a3( s19 ),
    .a4( s20 ),
    .a5( 1'b0 ),
    .out( s9 )
  );
  assign Operation[0] = (s8 & s29);
  assign Operation[1] = s9;
  assign Operation[2] = s10;
  assign Operation[3] = 1'b0;
endmodule

module CPU (
  input Clock,
  output [31:0] PC_val,
  output [3:0] State_out,
  output [31:0] A_reg,
  output [31:0] B_reg,
  output [31:0] Imm,
  output [31:0] Al_out,
  output ALU_a,
  output [1:0] ALU_b,
  output [3:0] ALU_in,
  output [31:0] MemDataRegOut,
  output [31:0] op_1,
  output [31:0] op_2,
  output [31:0] I_out
);
  wire [31:0] s0;
  wire s1;
  wire [31:0] PC_val_temp;
  wire s2;
  wire [23:0] s3;
  wire [23:0] s4;
  wire [23:0] s5;
  wire [31:0] B_reg_temp;
  wire Mem_Write;
  wire Mem_Read;
  wire [31:0] s6;
  wire IRWrite;
  wire [31:0] I_out_temp;
  wire [31:0] MemDataRegOut_temp;
  wire MemToReg;
  wire [31:0] s7;
  wire [31:0] s8;
  wire RegWrite;
  wire [4:0] s9;
  wire [4:0] s10;
  wire [4:0] s11;
  wire [31:0] s12;
  wire [31:0] s13;
  wire [31:0] A_reg_temp;
  wire ALU_a_temp;
  wire [31:0] op_1_temp;
  wire [1:0] ALU_b_temp;
  wire [31:0] Imm_temp;
  wire [31:0] op_2_temp;
  wire [3:0] ALU_in_temp;
  wire [31:0] Al_out_temp;
  wire s14;
  wire s15;
  wire s16;
  wire [6:0] s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire ALUOp0;
  wire ALUOp1;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire s37;
  wire [3:0] s38;
  wire [3:0] State_out_temp;
  wire [1:0] s39;
  wire [3:0] s40;
  wire I_Type;
  // PC
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i0 (
    .D( s0 ),
    .C( Clock ),
    .en( s1 ),
    .Q( PC_val_temp )
  );
  Mux_2x1_NBits #(
    .Bits(24)
  )
  Mux_2x1_NBits_i1 (
    .sel( s2 ),
    .in_0( s3 ),
    .in_1( s4 ),
    .out( s5 )
  );
  // Mem_Dummy
  DIG_RAMDualPort #(
    .Bits(32),
    .AddrBits(24)
  )
  DIG_RAMDualPort_i2 (
    .A( s5 ),
    .Din( B_reg_temp ),
    .str( Mem_Write ),
    .C( Clock ),
    .ld( Mem_Read ),
    .D( s6 )
  );
  // Instr_Reg
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i3 (
    .D( s6 ),
    .C( Clock ),
    .en( IRWrite ),
    .Q( I_out_temp )
  );
  // MemDataReg
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i4 (
    .D( s6 ),
    .C( Clock ),
    .en( 1'b1 ),
    .Q( MemDataRegOut_temp )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i5 (
    .sel( MemToReg ),
    .in_0( s7 ),
    .in_1( MemDataRegOut_temp ),
    .out( s8 )
  );
  // RegFile
  RegFile32Bit RegFile32Bit_i6 (
    .DataToWrite( s8 ),
    .writeEnable( RegWrite ),
    .writeReg( s9 ),
    .Read1( s10 ),
    .Read2( s11 ),
    .CPU_clock( Clock ),
    .Register1( s12 ),
    .Register2( s13 )
  );
  // A_reg
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i7 (
    .D( s12 ),
    .C( Clock ),
    .en( 1'b1 ),
    .Q( A_reg_temp )
  );
  // B_reg
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i8 (
    .D( s13 ),
    .C( Clock ),
    .en( 1'b1 ),
    .Q( B_reg_temp )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i9 (
    .sel( ALU_a_temp ),
    .in_0( PC_val_temp ),
    .in_1( A_reg_temp ),
    .out( op_1_temp )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i10 (
    .sel( ALU_b_temp ),
    .in_0( B_reg_temp ),
    .in_1( 32'b100 ),
    .in_2( Imm_temp ),
    .in_3( 32'b0 ),
    .out( op_2_temp )
  );
  ImmediateGenerator ImmediateGenerator_i11 (
    .Ins( I_out_temp ),
    .imm( Imm_temp )
  );
  // ALU
  ALU32Bit ALU32Bit_i12 (
    .Operation( ALU_in_temp ),
    .a( op_1_temp ),
    .b( op_2_temp ),
    .ALU_out( Al_out_temp ),
    .zero( s14 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i13 (
    .sel( s16 ),
    .in_0( Al_out_temp ),
    .in_1( s7 ),
    .out( s0 )
  );
  // ALU_out
  DIG_Register_BUS #(
    .Bits(32)
  )
  DIG_Register_BUS_i14 (
    .D( Al_out_temp ),
    .C( Clock ),
    .en( 1'b1 ),
    .Q( s7 )
  );
  // ControlUnit
  OPCodeControlUnit OPCodeControlUnit_i15 (
    .I0( s18 ),
    .I1( s19 ),
    .I2( s20 ),
    .I3( s21 ),
    .I4( s22 ),
    .I5( s23 ),
    .I6( s24 ),
    .S_0( s25 ),
    .S_1( s26 ),
    .S_2( s27 ),
    .S_3( s28 ),
    .PCWrite( s29 ),
    .PCWriteCond( s15 ),
    .IorD( s2 ),
    .MemWrite( Mem_Write ),
    .MemRead( Mem_Read ),
    .IRWrite( IRWrite ),
    .MemtoReg( MemToReg ),
    .PCSource0( s30 ),
    .PCSource1( s31 ),
    .ALUOp0( ALUOp0 ),
    .ALUOp1( ALUOp1 ),
    .ALUSrcB1( s32 ),
    .ALUSrcB0( s33 ),
    .ALUSrcA( ALU_a_temp ),
    .RegWrite( RegWrite ),
    .NS_0( s34 ),
    .NS_1( s35 ),
    .NS_2( s36 ),
    .NS_3( s37 )
  );
  // STATE_REG
  DIG_Register_BUS #(
    .Bits(4)
  )
  DIG_Register_BUS_i16 (
    .D( s38 ),
    .C( Clock ),
    .en( 1'b1 ),
    .Q( State_out_temp )
  );
  assign s38[0] = s34;
  assign s38[1] = s35;
  assign s38[2] = s36;
  assign s38[3] = s37;
  assign s1 = (s29 | (s15 & s14));
  assign ALU_b_temp[0] = s33;
  assign ALU_b_temp[1] = s32;
  alu_control_unit_2 alu_control_unit_2_i17 (
    .ALUop( s39 ),
    .F( s40 ),
    .Itype( I_Type ),
    .Operation( ALU_in_temp )
  );
  assign s39[0] = ALUOp0;
  assign s39[1] = ALUOp1;
  assign s40[2:0] = I_out_temp[14:12];
  assign s40[3] = I_out_temp[30];
  assign s16 = (s30 | s31);
  assign s17 = I_out_temp[6:0];
  assign s9 = I_out_temp[11:7];
  assign s10 = I_out_temp[19:15];
  assign s11 = I_out_temp[24:20];
  assign s3 = PC_val_temp[25:2];
  assign s18 = s17[0];
  assign s19 = s17[1];
  assign s20 = s17[2];
  assign s21 = s17[3];
  assign s22 = s17[4];
  assign s23 = s17[5];
  assign s24 = s17[6];
  assign s25 = State_out_temp[0];
  assign s26 = State_out_temp[1];
  assign s27 = State_out_temp[2];
  assign s28 = State_out_temp[3];
  assign I_Type = I_out_temp[5];
  assign s4 = s7[23:0];
  assign PC_val = PC_val_temp;
  assign State_out = State_out_temp;
  assign A_reg = A_reg_temp;
  assign B_reg = B_reg_temp;
  assign Imm = Imm_temp;
  assign Al_out = Al_out_temp;
  assign ALU_a = ALU_a_temp;
  assign ALU_b = ALU_b_temp;
  assign ALU_in = ALU_in_temp;
  assign MemDataRegOut = MemDataRegOut_temp;
  assign op_1 = op_1_temp;
  assign op_2 = op_2_temp;
  assign I_out = I_out_temp;
endmodule
